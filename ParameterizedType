public interface ResponseEntity<Head, Body> {

}


@Data
public class MyResponse1 implements ResponseEntity<ResponseHead, ResponseBody> {
    private ResponseHead head;
    private ResponseBody body;
}

@Data
public class ResponseHead {
    private String head2;
    private String head1;
}

@Data
public class ResponseBody {
    private String body1;
    private String body2;
}

public static void main(String[] args) throws Exception {
    getClassMap(MyResponse1.class);
}

/**
 * 获取当前类的类型Map
 * @param clazz 当前类
 * @param <T> 当前类类型
 * @return 类型Map
 */
private static <T extends ResponseEntity> HashMap<String, Class<?>> getClassMap(Class<T> clazz) throws Exception {
    Type[] typeArray = getTypeArray(clazz);
    HashMap<String, Class<?>> response = new HashMap<>();
    response.put("class", clazz);
    response.put("head", (Class<?>) typeArray[0]);
    response.put("body", (Class<?>) typeArray[1]);
    System.out.println("当前类的字段-------------------");
    Field[] instanceFieldArray = clazz.getDeclaredFields();
    for (Field field : instanceFieldArray) {
        System.out.println(field);
    }
    System.out.println("Head类的字段-------------------");
    Type head = typeArray[0];
    Class<?> headInstance = (Class<?>) head;
    Field[] headFieldArray = headInstance.getDeclaredFields();
    for (Field field : headFieldArray) {
        System.out.println(field);
    }
    System.out.println("Body类的字段-------------------");
    Type body = typeArray[1];
    Class<?> bodyInstance = (Class<?>) body;
    Field[] bodyFieldArray = bodyInstance.getDeclaredFields();
    for (Field field : bodyFieldArray) {
        System.out.println(field);
    }
    return response;
}

/**
 * 获取去类型数组
 * @param clazz 类型
 * @param <T> 类类型
 * @return 类型数组
 */
private static <T extends ResponseEntity> Type[] getTypeArray(Class<T> clazz) {
    ParameterizedType type = (ParameterizedType) clazz.getGenericInterfaces()[0];
    // 如果ResponseEntity是一个抽象类而不是接口 ParameterizedType type = (ParameterizedType) clazz.getGenericSuperclass()
    return type.getActualTypeArguments();
}

/**
 * 获取Head的类型
 * @param types 类型数组
 * @return Head的类型
 */
private static Type getHeadType(Type[] types) {
    return types[0];
}

/**
 * 获取Body的类型
 * @param types 类型数组
 * @return Body的类型
 */
private static Type getBodyType(Type[] types) {
    return types[1];
}
