package com.jx3treasure.appearance.util;

import com.alibaba.fastjson.JSON;
import com.jx3treasure.appearance.enums.ResponseStatus;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.util.concurrent.*;

/**
 * Created by hasee on 2017/7/12.
 */
@Aspect
@Component
public class ResponseAspect {

    private final static Logger logger = LoggerFactory.getLogger(ResponseAspect.class);

    @Pointcut("execution(* com.jx3treasure.appearance.web.controller..*(..))")
    public void pointcut() {

    }

    @Around("pointcut()")
    public Object around(ProceedingJoinPoint point) {
        final ExecutorService exec = Executors.newFixedThreadPool(1);
        Callable<BaseResponse> callable = () -> proceed(point);
        Future<BaseResponse> future = exec.submit(callable);
        BaseResponse response;
        try {
            response = future.get(1000 * 10, TimeUnit.MILLISECONDS);
            return response;
        } catch (InterruptedException e) {
            e.printStackTrace();
            response = new BaseResponse(ResponseStatus.UNKNOWN);
        } catch (ExecutionException e) {
            e.printStackTrace();
            response = new BaseResponse(ResponseStatus.UNKNOWN);
        } catch (TimeoutException e) {
            e.printStackTrace();
            logger.warn("请求超时");
            response = new BaseResponse(ResponseStatus.REQUEST_TIMEOUT);
        } finally {
            exec.shutdown();
        }
        return response;
    }

    public BaseResponse proceed(ProceedingJoinPoint point) {
        BaseResponse response;
        String methodName = point.getSignature().getName();
        StringBuilder logSb = new StringBuilder("\r\n");
        logSb.append(String.format("[Method]\t%s\r\n", methodName));
        Object[] args = point.getArgs();
        logSb.append(String.format("[Args]\t\t%s\r\n", JSON.toJSONString(args)));
        try {
            Object result = point.proceed();
            response = new BaseResponse(ResponseStatus.OK);
            response.setResult(result);
            logSb.append(String.format("[Result]\t%s\r\n", JSON.toJSONString(result)));
            logger.info(logSb.toString());
        } catch (BusinessException e) {
//            e.printStackTrace();
            logger.warn(logSb.toString(), e);
            response = new BaseResponse(e.getResponseStatus());
        } catch (Throwable throwable) {
//            throwable.printStackTrace();
            logger.error(logSb.toString(), throwable);
            response = new BaseResponse(ResponseStatus.UNKNOWN);
        }
        return response;
    }

}
