#  Server容器配置
server:
  port: 80

spring:
  session:
    store-type: redis
  application:
    name: backend-manage
  datasource:
    name: 主库
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/backend?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true
    username: root
    password: Chen1436863821.
  #    hikari:
  #      maximum-pool-size: 1
  #      minimum-idle: 1
  #  quartz:
  #    job-store-type: jdbc
  #    properties:
  #      #  可以是任何字符串，并且该值对调度程序本身没有意义，
  #      #  而是作为客户端代码在同一程序中使用多个实例时区分调度程序的机制。
  #      #  如果您正在使用群集功能，则必须对群集中“逻辑上”相同的调度程序的每个实例使用相同的名称。
  #      #  默认QuartzScheduler
  #      org.quartz.scheduler.instanceName: QuartzScheduler
  #      #  默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的
  #      org.quartz.scheduler.instanceId: AUTO
  #      #  持久化配置
  #      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
  #      #  仅为数据库制作了特定于数据库的代理
  #      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
  #      #  数据库表前缀
  #      org.quartz.jobStore.tablePrefix: QRTZ_
  #      #  打开群集功能 ,Clustering目前与JDBC-Jobstore（JobStoreTX或JobStoreCMT）
  #      #  和TerracottaJobStore一起使用。功能包括负载平衡和 job故障转移
  #      #  （如果JobDetail的“请求恢复”标志设置为true）。
  #      org.quartz.jobStore.isClustered: true
  #      #  设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度
  #      org.quartz.jobStore.clusterCheckinInterval: 10000
  #      #  以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，
  #      #  因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。
  #      #  从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题
  #      org.quartz.jobStore.useProperties: true
  #      #  在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。
  #      #  默认值（如果您在配置中未输入此属性）为60000（60秒）
  #      org.quartz.jobStore.misfireThreshold: 60000
  #      #  配置线程池 (与spring整合后，使用spring线程池)
  #      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
  #      org.quartz.threadPool.threadCount: 10
  #      org.quartz.threadPool.threadPriority: 5
  #      org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true


  #  redis:
  #    database: 0
  #    host: 127.0.0.1
  #    port: 6379
  #    password: Chen1436863821.
  jackson:
    default-property-inclusion: non_null
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss.SSS
    locale: zh_CN

#  属性加密配置
jasypt:
  encryptor:
    password: ${env_jasypt_encryptor_password}
    algorithm: PBEWithMD5AndDES
    keyObtentionIterations: 1000
    poolSize: 1
    saltGeneratorClassname: org.jasypt.salt.RandomSaltGenerator
    stringOutputType: base64

swagger:
  enable: true

logging:
  level:
    com.chenfangming.backend.manage.persistence.mapper: debug